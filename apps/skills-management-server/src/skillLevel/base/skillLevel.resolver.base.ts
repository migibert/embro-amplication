/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SkillLevel } from "./SkillLevel";
import { SkillLevelCountArgs } from "./SkillLevelCountArgs";
import { SkillLevelFindManyArgs } from "./SkillLevelFindManyArgs";
import { SkillLevelFindUniqueArgs } from "./SkillLevelFindUniqueArgs";
import { CreateSkillLevelArgs } from "./CreateSkillLevelArgs";
import { UpdateSkillLevelArgs } from "./UpdateSkillLevelArgs";
import { DeleteSkillLevelArgs } from "./DeleteSkillLevelArgs";
import { Skill } from "../../skill/base/Skill";
import { Collaborator } from "../../collaborator/base/Collaborator";
import { SkillLevelService } from "../skillLevel.service";
@graphql.Resolver(() => SkillLevel)
export class SkillLevelResolverBase {
  constructor(protected readonly service: SkillLevelService) {}

  async _skillLevelsMeta(
    @graphql.Args() args: SkillLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SkillLevel])
  async skillLevels(
    @graphql.Args() args: SkillLevelFindManyArgs
  ): Promise<SkillLevel[]> {
    return this.service.skillLevels(args);
  }

  @graphql.Query(() => SkillLevel, { nullable: true })
  async skillLevel(
    @graphql.Args() args: SkillLevelFindUniqueArgs
  ): Promise<SkillLevel | null> {
    const result = await this.service.skillLevel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SkillLevel)
  async createSkillLevel(
    @graphql.Args() args: CreateSkillLevelArgs
  ): Promise<SkillLevel> {
    return await this.service.createSkillLevel({
      ...args,
      data: {
        ...args.data,

        skill: args.data.skill
          ? {
              connect: args.data.skill,
            }
          : undefined,

        collaborator: args.data.collaborator
          ? {
              connect: args.data.collaborator,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SkillLevel)
  async updateSkillLevel(
    @graphql.Args() args: UpdateSkillLevelArgs
  ): Promise<SkillLevel | null> {
    try {
      return await this.service.updateSkillLevel({
        ...args,
        data: {
          ...args.data,

          skill: args.data.skill
            ? {
                connect: args.data.skill,
              }
            : undefined,

          collaborator: args.data.collaborator
            ? {
                connect: args.data.collaborator,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SkillLevel)
  async deleteSkillLevel(
    @graphql.Args() args: DeleteSkillLevelArgs
  ): Promise<SkillLevel | null> {
    try {
      return await this.service.deleteSkillLevel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Skill, {
    nullable: true,
    name: "skill",
  })
  async getSkill(@graphql.Parent() parent: SkillLevel): Promise<Skill | null> {
    const result = await this.service.getSkill(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Collaborator, {
    nullable: true,
    name: "collaborator",
  })
  async getCollaborator(
    @graphql.Parent() parent: SkillLevel
  ): Promise<Collaborator | null> {
    const result = await this.service.getCollaborator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
