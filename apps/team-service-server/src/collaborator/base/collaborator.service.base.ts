/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Collaborator as PrismaCollaborator,
  CollaboratorSkill as PrismaCollaboratorSkill,
  Team as PrismaTeam,
} from "@prisma/client";

export class CollaboratorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CollaboratorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.collaborator.count(args);
  }

  async collaborators(
    args: Prisma.CollaboratorFindManyArgs
  ): Promise<PrismaCollaborator[]> {
    return this.prisma.collaborator.findMany(args);
  }
  async collaborator(
    args: Prisma.CollaboratorFindUniqueArgs
  ): Promise<PrismaCollaborator | null> {
    return this.prisma.collaborator.findUnique(args);
  }
  async createCollaborator(
    args: Prisma.CollaboratorCreateArgs
  ): Promise<PrismaCollaborator> {
    return this.prisma.collaborator.create(args);
  }
  async updateCollaborator(
    args: Prisma.CollaboratorUpdateArgs
  ): Promise<PrismaCollaborator> {
    return this.prisma.collaborator.update(args);
  }
  async deleteCollaborator(
    args: Prisma.CollaboratorDeleteArgs
  ): Promise<PrismaCollaborator> {
    return this.prisma.collaborator.delete(args);
  }

  async findCollaboratorSkills(
    parentId: string,
    args: Prisma.CollaboratorSkillFindManyArgs
  ): Promise<PrismaCollaboratorSkill[]> {
    return this.prisma.collaborator
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .collaboratorSkills(args);
  }

  async getTeam(parentId: string): Promise<PrismaTeam | null> {
    return this.prisma.collaborator
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }
}
