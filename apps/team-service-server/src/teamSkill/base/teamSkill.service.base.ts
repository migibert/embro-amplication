/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TeamSkill as PrismaTeamSkill,
  Team as PrismaTeam,
} from "@prisma/client";

export class TeamSkillServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TeamSkillCountArgs, "select">
  ): Promise<number> {
    return this.prisma.teamSkill.count(args);
  }

  async teamSkills(
    args: Prisma.TeamSkillFindManyArgs
  ): Promise<PrismaTeamSkill[]> {
    return this.prisma.teamSkill.findMany(args);
  }
  async teamSkill(
    args: Prisma.TeamSkillFindUniqueArgs
  ): Promise<PrismaTeamSkill | null> {
    return this.prisma.teamSkill.findUnique(args);
  }
  async createTeamSkill(
    args: Prisma.TeamSkillCreateArgs
  ): Promise<PrismaTeamSkill> {
    return this.prisma.teamSkill.create(args);
  }
  async updateTeamSkill(
    args: Prisma.TeamSkillUpdateArgs
  ): Promise<PrismaTeamSkill> {
    return this.prisma.teamSkill.update(args);
  }
  async deleteTeamSkill(
    args: Prisma.TeamSkillDeleteArgs
  ): Promise<PrismaTeamSkill> {
    return this.prisma.teamSkill.delete(args);
  }

  async getTeam(parentId: string): Promise<PrismaTeam | null> {
    return this.prisma.teamSkill
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }
}
