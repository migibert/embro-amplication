/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TeamSkill } from "./TeamSkill";
import { TeamSkillCountArgs } from "./TeamSkillCountArgs";
import { TeamSkillFindManyArgs } from "./TeamSkillFindManyArgs";
import { TeamSkillFindUniqueArgs } from "./TeamSkillFindUniqueArgs";
import { CreateTeamSkillArgs } from "./CreateTeamSkillArgs";
import { UpdateTeamSkillArgs } from "./UpdateTeamSkillArgs";
import { DeleteTeamSkillArgs } from "./DeleteTeamSkillArgs";
import { Team } from "../../team/base/Team";
import { TeamSkillService } from "../teamSkill.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TeamSkill)
export class TeamSkillResolverBase {
  constructor(
    protected readonly service: TeamSkillService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "read",
    possession: "any",
  })
  async _teamSkillsMeta(
    @graphql.Args() args: TeamSkillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TeamSkill])
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "read",
    possession: "any",
  })
  async teamSkills(
    @graphql.Args() args: TeamSkillFindManyArgs
  ): Promise<TeamSkill[]> {
    return this.service.teamSkills(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TeamSkill, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "read",
    possession: "own",
  })
  async teamSkill(
    @graphql.Args() args: TeamSkillFindUniqueArgs
  ): Promise<TeamSkill | null> {
    const result = await this.service.teamSkill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeamSkill)
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "create",
    possession: "any",
  })
  async createTeamSkill(
    @graphql.Args() args: CreateTeamSkillArgs
  ): Promise<TeamSkill> {
    return await this.service.createTeamSkill({
      ...args,
      data: {
        ...args.data,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeamSkill)
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "update",
    possession: "any",
  })
  async updateTeamSkill(
    @graphql.Args() args: UpdateTeamSkillArgs
  ): Promise<TeamSkill | null> {
    try {
      return await this.service.updateTeamSkill({
        ...args,
        data: {
          ...args.data,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeamSkill)
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "delete",
    possession: "any",
  })
  async deleteTeamSkill(
    @graphql.Args() args: DeleteTeamSkillArgs
  ): Promise<TeamSkill | null> {
    try {
      return await this.service.deleteTeamSkill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async getTeam(@graphql.Parent() parent: TeamSkill): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
