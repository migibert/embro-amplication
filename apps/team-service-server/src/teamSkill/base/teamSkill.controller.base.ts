/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TeamSkillService } from "../teamSkill.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TeamSkillCreateInput } from "./TeamSkillCreateInput";
import { TeamSkill } from "./TeamSkill";
import { TeamSkillFindManyArgs } from "./TeamSkillFindManyArgs";
import { TeamSkillWhereUniqueInput } from "./TeamSkillWhereUniqueInput";
import { TeamSkillUpdateInput } from "./TeamSkillUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TeamSkillControllerBase {
  constructor(
    protected readonly service: TeamSkillService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TeamSkill })
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTeamSkill(
    @common.Body() data: TeamSkillCreateInput
  ): Promise<TeamSkill> {
    return await this.service.createTeamSkill({
      data: {
        ...data,

        team: data.team
          ? {
              connect: data.team,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        skill: true,
        proficiency: true,

        team: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TeamSkill] })
  @ApiNestedQuery(TeamSkillFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async teamSkills(@common.Req() request: Request): Promise<TeamSkill[]> {
    const args = plainToClass(TeamSkillFindManyArgs, request.query);
    return this.service.teamSkills({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        skill: true,
        proficiency: true,

        team: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TeamSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async teamSkill(
    @common.Param() params: TeamSkillWhereUniqueInput
  ): Promise<TeamSkill | null> {
    const result = await this.service.teamSkill({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        skill: true,
        proficiency: true,

        team: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TeamSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTeamSkill(
    @common.Param() params: TeamSkillWhereUniqueInput,
    @common.Body() data: TeamSkillUpdateInput
  ): Promise<TeamSkill | null> {
    try {
      return await this.service.updateTeamSkill({
        where: params,
        data: {
          ...data,

          team: data.team
            ? {
                connect: data.team,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          skill: true,
          proficiency: true,

          team: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TeamSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TeamSkill",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTeamSkill(
    @common.Param() params: TeamSkillWhereUniqueInput
  ): Promise<TeamSkill | null> {
    try {
      return await this.service.deleteTeamSkill({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          skill: true,
          proficiency: true,

          team: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
